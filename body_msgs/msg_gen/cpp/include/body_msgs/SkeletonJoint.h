/* Auto-generated by genmsg_cpp for file /root/GR/body_msgs/msg/SkeletonJoint.msg */
#ifndef BODY_MSGS_MESSAGE_SKELETONJOINT_H
#define BODY_MSGS_MESSAGE_SKELETONJOINT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Point.h"

namespace body_msgs
{
template <class ContainerAllocator>
struct SkeletonJoint_ : public ros::Message
{
  typedef SkeletonJoint_<ContainerAllocator> Type;

  SkeletonJoint_()
  : position()
  , confidence(0.0)
  {
  }

  SkeletonJoint_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , confidence(0.0)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef float _confidence_type;
  float confidence;


private:
  static const char* __s_getDataType_() { return "body_msgs/SkeletonJoint"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8000af3463f92157ee303c820e3b02c6"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Point position\n\
float32 confidence\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, confidence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, confidence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(confidence);
    return size;
  }

  typedef boost::shared_ptr< ::body_msgs::SkeletonJoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::body_msgs::SkeletonJoint_<ContainerAllocator>  const> ConstPtr;
}; // struct SkeletonJoint
typedef  ::body_msgs::SkeletonJoint_<std::allocator<void> > SkeletonJoint;

typedef boost::shared_ptr< ::body_msgs::SkeletonJoint> SkeletonJointPtr;
typedef boost::shared_ptr< ::body_msgs::SkeletonJoint const> SkeletonJointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::body_msgs::SkeletonJoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace body_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::body_msgs::SkeletonJoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8000af3463f92157ee303c820e3b02c6";
  }

  static const char* value(const  ::body_msgs::SkeletonJoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8000af3463f92157ULL;
  static const uint64_t static_value2 = 0xee303c820e3b02c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::body_msgs::SkeletonJoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "body_msgs/SkeletonJoint";
  }

  static const char* value(const  ::body_msgs::SkeletonJoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::body_msgs::SkeletonJoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point position\n\
float32 confidence\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::body_msgs::SkeletonJoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::body_msgs::SkeletonJoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.confidence);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SkeletonJoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::body_msgs::SkeletonJoint_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BODY_MSGS_MESSAGE_SKELETONJOINT_H

