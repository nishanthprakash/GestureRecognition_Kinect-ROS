/* Auto-generated by genmsg_cpp for file /root/GR/body_msgs/msg/Skeleton.msg */
#ifndef BODY_MSGS_MESSAGE_SKELETON_H
#define BODY_MSGS_MESSAGE_SKELETON_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"
#include "body_msgs/SkeletonJoint.h"

namespace body_msgs
{
template <class ContainerAllocator>
struct Skeleton_ : public ros::Message
{
  typedef Skeleton_<ContainerAllocator> Type;

  Skeleton_()
  : playerid(0)
  , head()
  , neck()
  , right_hand()
  , left_hand()
  , right_shoulder()
  , left_shoulder()
  , right_elbow()
  , left_elbow()
  , torso()
  , left_hip()
  , right_hip()
  , left_knee()
  , right_knee()
  , left_foot()
  , right_foot()
  {
  }

  Skeleton_(const ContainerAllocator& _alloc)
  : playerid(0)
  , head(_alloc)
  , neck(_alloc)
  , right_hand(_alloc)
  , left_hand(_alloc)
  , right_shoulder(_alloc)
  , left_shoulder(_alloc)
  , right_elbow(_alloc)
  , left_elbow(_alloc)
  , torso(_alloc)
  , left_hip(_alloc)
  , right_hip(_alloc)
  , left_knee(_alloc)
  , right_knee(_alloc)
  , left_foot(_alloc)
  , right_foot(_alloc)
  {
  }

  typedef int32_t _playerid_type;
  int32_t playerid;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _head_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  head;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _neck_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  neck;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _right_hand_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  right_hand;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _left_hand_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  left_hand;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _right_shoulder_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  right_shoulder;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _left_shoulder_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  left_shoulder;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _right_elbow_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  right_elbow;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _left_elbow_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  left_elbow;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _torso_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  torso;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _left_hip_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  left_hip;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _right_hip_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  right_hip;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _left_knee_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  left_knee;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _right_knee_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  right_knee;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _left_foot_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  left_foot;

  typedef  ::body_msgs::SkeletonJoint_<ContainerAllocator>  _right_foot_type;
   ::body_msgs::SkeletonJoint_<ContainerAllocator>  right_foot;


private:
  static const char* __s_getDataType_() { return "body_msgs/Skeleton"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0c41aa8101907706f9e2c5e6f1a31dfd"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 playerid\n\
body_msgs/SkeletonJoint head\n\
body_msgs/SkeletonJoint neck\n\
body_msgs/SkeletonJoint right_hand\n\
body_msgs/SkeletonJoint left_hand\n\
body_msgs/SkeletonJoint right_shoulder\n\
body_msgs/SkeletonJoint left_shoulder\n\
body_msgs/SkeletonJoint right_elbow\n\
body_msgs/SkeletonJoint left_elbow\n\
body_msgs/SkeletonJoint torso\n\
body_msgs/SkeletonJoint left_hip\n\
body_msgs/SkeletonJoint right_hip\n\
body_msgs/SkeletonJoint left_knee\n\
body_msgs/SkeletonJoint right_knee\n\
body_msgs/SkeletonJoint left_foot\n\
body_msgs/SkeletonJoint right_foot\n\
\n\
================================================================================\n\
MSG: body_msgs/SkeletonJoint\n\
geometry_msgs/Point position\n\
float32 confidence\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, playerid);
    ros::serialization::serialize(stream, head);
    ros::serialization::serialize(stream, neck);
    ros::serialization::serialize(stream, right_hand);
    ros::serialization::serialize(stream, left_hand);
    ros::serialization::serialize(stream, right_shoulder);
    ros::serialization::serialize(stream, left_shoulder);
    ros::serialization::serialize(stream, right_elbow);
    ros::serialization::serialize(stream, left_elbow);
    ros::serialization::serialize(stream, torso);
    ros::serialization::serialize(stream, left_hip);
    ros::serialization::serialize(stream, right_hip);
    ros::serialization::serialize(stream, left_knee);
    ros::serialization::serialize(stream, right_knee);
    ros::serialization::serialize(stream, left_foot);
    ros::serialization::serialize(stream, right_foot);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, playerid);
    ros::serialization::deserialize(stream, head);
    ros::serialization::deserialize(stream, neck);
    ros::serialization::deserialize(stream, right_hand);
    ros::serialization::deserialize(stream, left_hand);
    ros::serialization::deserialize(stream, right_shoulder);
    ros::serialization::deserialize(stream, left_shoulder);
    ros::serialization::deserialize(stream, right_elbow);
    ros::serialization::deserialize(stream, left_elbow);
    ros::serialization::deserialize(stream, torso);
    ros::serialization::deserialize(stream, left_hip);
    ros::serialization::deserialize(stream, right_hip);
    ros::serialization::deserialize(stream, left_knee);
    ros::serialization::deserialize(stream, right_knee);
    ros::serialization::deserialize(stream, left_foot);
    ros::serialization::deserialize(stream, right_foot);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(playerid);
    size += ros::serialization::serializationLength(head);
    size += ros::serialization::serializationLength(neck);
    size += ros::serialization::serializationLength(right_hand);
    size += ros::serialization::serializationLength(left_hand);
    size += ros::serialization::serializationLength(right_shoulder);
    size += ros::serialization::serializationLength(left_shoulder);
    size += ros::serialization::serializationLength(right_elbow);
    size += ros::serialization::serializationLength(left_elbow);
    size += ros::serialization::serializationLength(torso);
    size += ros::serialization::serializationLength(left_hip);
    size += ros::serialization::serializationLength(right_hip);
    size += ros::serialization::serializationLength(left_knee);
    size += ros::serialization::serializationLength(right_knee);
    size += ros::serialization::serializationLength(left_foot);
    size += ros::serialization::serializationLength(right_foot);
    return size;
  }

  typedef boost::shared_ptr< ::body_msgs::Skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::body_msgs::Skeleton_<ContainerAllocator>  const> ConstPtr;
}; // struct Skeleton
typedef  ::body_msgs::Skeleton_<std::allocator<void> > Skeleton;

typedef boost::shared_ptr< ::body_msgs::Skeleton> SkeletonPtr;
typedef boost::shared_ptr< ::body_msgs::Skeleton const> SkeletonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::body_msgs::Skeleton_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::body_msgs::Skeleton_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace body_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::body_msgs::Skeleton_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c41aa8101907706f9e2c5e6f1a31dfd";
  }

  static const char* value(const  ::body_msgs::Skeleton_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c41aa8101907706ULL;
  static const uint64_t static_value2 = 0xf9e2c5e6f1a31dfdULL;
};

template<class ContainerAllocator>
struct DataType< ::body_msgs::Skeleton_<ContainerAllocator> > {
  static const char* value() 
  {
    return "body_msgs/Skeleton";
  }

  static const char* value(const  ::body_msgs::Skeleton_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::body_msgs::Skeleton_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 playerid\n\
body_msgs/SkeletonJoint head\n\
body_msgs/SkeletonJoint neck\n\
body_msgs/SkeletonJoint right_hand\n\
body_msgs/SkeletonJoint left_hand\n\
body_msgs/SkeletonJoint right_shoulder\n\
body_msgs/SkeletonJoint left_shoulder\n\
body_msgs/SkeletonJoint right_elbow\n\
body_msgs/SkeletonJoint left_elbow\n\
body_msgs/SkeletonJoint torso\n\
body_msgs/SkeletonJoint left_hip\n\
body_msgs/SkeletonJoint right_hip\n\
body_msgs/SkeletonJoint left_knee\n\
body_msgs/SkeletonJoint right_knee\n\
body_msgs/SkeletonJoint left_foot\n\
body_msgs/SkeletonJoint right_foot\n\
\n\
================================================================================\n\
MSG: body_msgs/SkeletonJoint\n\
geometry_msgs/Point position\n\
float32 confidence\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::body_msgs::Skeleton_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::body_msgs::Skeleton_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::body_msgs::Skeleton_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.playerid);
    stream.next(m.head);
    stream.next(m.neck);
    stream.next(m.right_hand);
    stream.next(m.left_hand);
    stream.next(m.right_shoulder);
    stream.next(m.left_shoulder);
    stream.next(m.right_elbow);
    stream.next(m.left_elbow);
    stream.next(m.torso);
    stream.next(m.left_hip);
    stream.next(m.right_hip);
    stream.next(m.left_knee);
    stream.next(m.right_knee);
    stream.next(m.left_foot);
    stream.next(m.right_foot);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Skeleton_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::body_msgs::Skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::body_msgs::Skeleton_<ContainerAllocator> & v) 
  {
    s << indent << "playerid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.playerid);
    s << indent << "head: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.head);
    s << indent << "neck: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.neck);
    s << indent << "right_hand: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_hand);
    s << indent << "left_hand: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_hand);
    s << indent << "right_shoulder: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_shoulder);
    s << indent << "left_shoulder: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_shoulder);
    s << indent << "right_elbow: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_elbow);
    s << indent << "left_elbow: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_elbow);
    s << indent << "torso: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.torso);
    s << indent << "left_hip: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_hip);
    s << indent << "right_hip: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_hip);
    s << indent << "left_knee: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_knee);
    s << indent << "right_knee: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_knee);
    s << indent << "left_foot: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_foot);
    s << indent << "right_foot: ";
s << std::endl;
    Printer< ::body_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_foot);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BODY_MSGS_MESSAGE_SKELETON_H

