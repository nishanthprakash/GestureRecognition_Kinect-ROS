"""autogenerated by genmsg_py from gesture.msg. Do not edit."""
import roslib.message
import struct


class gesture(roslib.message.Message):
  _md5sum = "1f0892595472edf00f67d006e6b907ed"
  _type = "gesture/gesture"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool gesture0
bool gesture1
bool gesture2
bool gesture3
bool gesture4
bool gesture5
bool gesture6
bool gesture7
bool gesture8
bool gesture9
bool gesture10
bool gesture11
bool gesture12
bool gesture13
bool gesture14
bool gesture15
bool gesture16
bool gesture17
bool gesture18
bool gesture19



"""
  __slots__ = ['gesture0','gesture1','gesture2','gesture3','gesture4','gesture5','gesture6','gesture7','gesture8','gesture9','gesture10','gesture11','gesture12','gesture13','gesture14','gesture15','gesture16','gesture17','gesture18','gesture19']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       gesture0,gesture1,gesture2,gesture3,gesture4,gesture5,gesture6,gesture7,gesture8,gesture9,gesture10,gesture11,gesture12,gesture13,gesture14,gesture15,gesture16,gesture17,gesture18,gesture19
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(gesture, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gesture0 is None:
        self.gesture0 = False
      if self.gesture1 is None:
        self.gesture1 = False
      if self.gesture2 is None:
        self.gesture2 = False
      if self.gesture3 is None:
        self.gesture3 = False
      if self.gesture4 is None:
        self.gesture4 = False
      if self.gesture5 is None:
        self.gesture5 = False
      if self.gesture6 is None:
        self.gesture6 = False
      if self.gesture7 is None:
        self.gesture7 = False
      if self.gesture8 is None:
        self.gesture8 = False
      if self.gesture9 is None:
        self.gesture9 = False
      if self.gesture10 is None:
        self.gesture10 = False
      if self.gesture11 is None:
        self.gesture11 = False
      if self.gesture12 is None:
        self.gesture12 = False
      if self.gesture13 is None:
        self.gesture13 = False
      if self.gesture14 is None:
        self.gesture14 = False
      if self.gesture15 is None:
        self.gesture15 = False
      if self.gesture16 is None:
        self.gesture16 = False
      if self.gesture17 is None:
        self.gesture17 = False
      if self.gesture18 is None:
        self.gesture18 = False
      if self.gesture19 is None:
        self.gesture19 = False
    else:
      self.gesture0 = False
      self.gesture1 = False
      self.gesture2 = False
      self.gesture3 = False
      self.gesture4 = False
      self.gesture5 = False
      self.gesture6 = False
      self.gesture7 = False
      self.gesture8 = False
      self.gesture9 = False
      self.gesture10 = False
      self.gesture11 = False
      self.gesture12 = False
      self.gesture13 = False
      self.gesture14 = False
      self.gesture15 = False
      self.gesture16 = False
      self.gesture17 = False
      self.gesture18 = False
      self.gesture19 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_20B.pack(_x.gesture0, _x.gesture1, _x.gesture2, _x.gesture3, _x.gesture4, _x.gesture5, _x.gesture6, _x.gesture7, _x.gesture8, _x.gesture9, _x.gesture10, _x.gesture11, _x.gesture12, _x.gesture13, _x.gesture14, _x.gesture15, _x.gesture16, _x.gesture17, _x.gesture18, _x.gesture19))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.gesture0, _x.gesture1, _x.gesture2, _x.gesture3, _x.gesture4, _x.gesture5, _x.gesture6, _x.gesture7, _x.gesture8, _x.gesture9, _x.gesture10, _x.gesture11, _x.gesture12, _x.gesture13, _x.gesture14, _x.gesture15, _x.gesture16, _x.gesture17, _x.gesture18, _x.gesture19,) = _struct_20B.unpack(str[start:end])
      self.gesture0 = bool(self.gesture0)
      self.gesture1 = bool(self.gesture1)
      self.gesture2 = bool(self.gesture2)
      self.gesture3 = bool(self.gesture3)
      self.gesture4 = bool(self.gesture4)
      self.gesture5 = bool(self.gesture5)
      self.gesture6 = bool(self.gesture6)
      self.gesture7 = bool(self.gesture7)
      self.gesture8 = bool(self.gesture8)
      self.gesture9 = bool(self.gesture9)
      self.gesture10 = bool(self.gesture10)
      self.gesture11 = bool(self.gesture11)
      self.gesture12 = bool(self.gesture12)
      self.gesture13 = bool(self.gesture13)
      self.gesture14 = bool(self.gesture14)
      self.gesture15 = bool(self.gesture15)
      self.gesture16 = bool(self.gesture16)
      self.gesture17 = bool(self.gesture17)
      self.gesture18 = bool(self.gesture18)
      self.gesture19 = bool(self.gesture19)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_20B.pack(_x.gesture0, _x.gesture1, _x.gesture2, _x.gesture3, _x.gesture4, _x.gesture5, _x.gesture6, _x.gesture7, _x.gesture8, _x.gesture9, _x.gesture10, _x.gesture11, _x.gesture12, _x.gesture13, _x.gesture14, _x.gesture15, _x.gesture16, _x.gesture17, _x.gesture18, _x.gesture19))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.gesture0, _x.gesture1, _x.gesture2, _x.gesture3, _x.gesture4, _x.gesture5, _x.gesture6, _x.gesture7, _x.gesture8, _x.gesture9, _x.gesture10, _x.gesture11, _x.gesture12, _x.gesture13, _x.gesture14, _x.gesture15, _x.gesture16, _x.gesture17, _x.gesture18, _x.gesture19,) = _struct_20B.unpack(str[start:end])
      self.gesture0 = bool(self.gesture0)
      self.gesture1 = bool(self.gesture1)
      self.gesture2 = bool(self.gesture2)
      self.gesture3 = bool(self.gesture3)
      self.gesture4 = bool(self.gesture4)
      self.gesture5 = bool(self.gesture5)
      self.gesture6 = bool(self.gesture6)
      self.gesture7 = bool(self.gesture7)
      self.gesture8 = bool(self.gesture8)
      self.gesture9 = bool(self.gesture9)
      self.gesture10 = bool(self.gesture10)
      self.gesture11 = bool(self.gesture11)
      self.gesture12 = bool(self.gesture12)
      self.gesture13 = bool(self.gesture13)
      self.gesture14 = bool(self.gesture14)
      self.gesture15 = bool(self.gesture15)
      self.gesture16 = bool(self.gesture16)
      self.gesture17 = bool(self.gesture17)
      self.gesture18 = bool(self.gesture18)
      self.gesture19 = bool(self.gesture19)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_20B = struct.Struct("<20B")
