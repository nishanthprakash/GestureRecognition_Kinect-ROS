/* Auto-generated by genmsg_cpp for file /root/GR/gesture/msg/gesture.msg */
#ifndef GESTURE_MESSAGE_GESTURE_H
#define GESTURE_MESSAGE_GESTURE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace gesture
{
template <class ContainerAllocator>
struct gesture_ : public ros::Message
{
  typedef gesture_<ContainerAllocator> Type;

  gesture_()
  : gesture0(false)
  , gesture1(false)
  , gesture2(false)
  , gesture3(false)
  , gesture4(false)
  , gesture5(false)
  , gesture6(false)
  , gesture7(false)
  , gesture8(false)
  , gesture9(false)
  , gesture10(false)
  , gesture11(false)
  , gesture12(false)
  , gesture13(false)
  , gesture14(false)
  , gesture15(false)
  , gesture16(false)
  , gesture17(false)
  , gesture18(false)
  , gesture19(false)
  {
  }

  gesture_(const ContainerAllocator& _alloc)
  : gesture0(false)
  , gesture1(false)
  , gesture2(false)
  , gesture3(false)
  , gesture4(false)
  , gesture5(false)
  , gesture6(false)
  , gesture7(false)
  , gesture8(false)
  , gesture9(false)
  , gesture10(false)
  , gesture11(false)
  , gesture12(false)
  , gesture13(false)
  , gesture14(false)
  , gesture15(false)
  , gesture16(false)
  , gesture17(false)
  , gesture18(false)
  , gesture19(false)
  {
  }

  typedef uint8_t _gesture0_type;
  uint8_t gesture0;

  typedef uint8_t _gesture1_type;
  uint8_t gesture1;

  typedef uint8_t _gesture2_type;
  uint8_t gesture2;

  typedef uint8_t _gesture3_type;
  uint8_t gesture3;

  typedef uint8_t _gesture4_type;
  uint8_t gesture4;

  typedef uint8_t _gesture5_type;
  uint8_t gesture5;

  typedef uint8_t _gesture6_type;
  uint8_t gesture6;

  typedef uint8_t _gesture7_type;
  uint8_t gesture7;

  typedef uint8_t _gesture8_type;
  uint8_t gesture8;

  typedef uint8_t _gesture9_type;
  uint8_t gesture9;

  typedef uint8_t _gesture10_type;
  uint8_t gesture10;

  typedef uint8_t _gesture11_type;
  uint8_t gesture11;

  typedef uint8_t _gesture12_type;
  uint8_t gesture12;

  typedef uint8_t _gesture13_type;
  uint8_t gesture13;

  typedef uint8_t _gesture14_type;
  uint8_t gesture14;

  typedef uint8_t _gesture15_type;
  uint8_t gesture15;

  typedef uint8_t _gesture16_type;
  uint8_t gesture16;

  typedef uint8_t _gesture17_type;
  uint8_t gesture17;

  typedef uint8_t _gesture18_type;
  uint8_t gesture18;

  typedef uint8_t _gesture19_type;
  uint8_t gesture19;


private:
  static const char* __s_getDataType_() { return "gesture/gesture"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1f0892595472edf00f67d006e6b907ed"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool gesture0\n\
bool gesture1\n\
bool gesture2\n\
bool gesture3\n\
bool gesture4\n\
bool gesture5\n\
bool gesture6\n\
bool gesture7\n\
bool gesture8\n\
bool gesture9\n\
bool gesture10\n\
bool gesture11\n\
bool gesture12\n\
bool gesture13\n\
bool gesture14\n\
bool gesture15\n\
bool gesture16\n\
bool gesture17\n\
bool gesture18\n\
bool gesture19\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, gesture0);
    ros::serialization::serialize(stream, gesture1);
    ros::serialization::serialize(stream, gesture2);
    ros::serialization::serialize(stream, gesture3);
    ros::serialization::serialize(stream, gesture4);
    ros::serialization::serialize(stream, gesture5);
    ros::serialization::serialize(stream, gesture6);
    ros::serialization::serialize(stream, gesture7);
    ros::serialization::serialize(stream, gesture8);
    ros::serialization::serialize(stream, gesture9);
    ros::serialization::serialize(stream, gesture10);
    ros::serialization::serialize(stream, gesture11);
    ros::serialization::serialize(stream, gesture12);
    ros::serialization::serialize(stream, gesture13);
    ros::serialization::serialize(stream, gesture14);
    ros::serialization::serialize(stream, gesture15);
    ros::serialization::serialize(stream, gesture16);
    ros::serialization::serialize(stream, gesture17);
    ros::serialization::serialize(stream, gesture18);
    ros::serialization::serialize(stream, gesture19);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, gesture0);
    ros::serialization::deserialize(stream, gesture1);
    ros::serialization::deserialize(stream, gesture2);
    ros::serialization::deserialize(stream, gesture3);
    ros::serialization::deserialize(stream, gesture4);
    ros::serialization::deserialize(stream, gesture5);
    ros::serialization::deserialize(stream, gesture6);
    ros::serialization::deserialize(stream, gesture7);
    ros::serialization::deserialize(stream, gesture8);
    ros::serialization::deserialize(stream, gesture9);
    ros::serialization::deserialize(stream, gesture10);
    ros::serialization::deserialize(stream, gesture11);
    ros::serialization::deserialize(stream, gesture12);
    ros::serialization::deserialize(stream, gesture13);
    ros::serialization::deserialize(stream, gesture14);
    ros::serialization::deserialize(stream, gesture15);
    ros::serialization::deserialize(stream, gesture16);
    ros::serialization::deserialize(stream, gesture17);
    ros::serialization::deserialize(stream, gesture18);
    ros::serialization::deserialize(stream, gesture19);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(gesture0);
    size += ros::serialization::serializationLength(gesture1);
    size += ros::serialization::serializationLength(gesture2);
    size += ros::serialization::serializationLength(gesture3);
    size += ros::serialization::serializationLength(gesture4);
    size += ros::serialization::serializationLength(gesture5);
    size += ros::serialization::serializationLength(gesture6);
    size += ros::serialization::serializationLength(gesture7);
    size += ros::serialization::serializationLength(gesture8);
    size += ros::serialization::serializationLength(gesture9);
    size += ros::serialization::serializationLength(gesture10);
    size += ros::serialization::serializationLength(gesture11);
    size += ros::serialization::serializationLength(gesture12);
    size += ros::serialization::serializationLength(gesture13);
    size += ros::serialization::serializationLength(gesture14);
    size += ros::serialization::serializationLength(gesture15);
    size += ros::serialization::serializationLength(gesture16);
    size += ros::serialization::serializationLength(gesture17);
    size += ros::serialization::serializationLength(gesture18);
    size += ros::serialization::serializationLength(gesture19);
    return size;
  }

  typedef boost::shared_ptr< ::gesture::gesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gesture::gesture_<ContainerAllocator>  const> ConstPtr;
}; // struct gesture
typedef  ::gesture::gesture_<std::allocator<void> > gesture;

typedef boost::shared_ptr< ::gesture::gesture> gesturePtr;
typedef boost::shared_ptr< ::gesture::gesture const> gestureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gesture::gesture_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gesture::gesture_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::gesture::gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f0892595472edf00f67d006e6b907ed";
  }

  static const char* value(const  ::gesture::gesture_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1f0892595472edf0ULL;
  static const uint64_t static_value2 = 0x0f67d006e6b907edULL;
};

template<class ContainerAllocator>
struct DataType< ::gesture::gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gesture/gesture";
  }

  static const char* value(const  ::gesture::gesture_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gesture::gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool gesture0\n\
bool gesture1\n\
bool gesture2\n\
bool gesture3\n\
bool gesture4\n\
bool gesture5\n\
bool gesture6\n\
bool gesture7\n\
bool gesture8\n\
bool gesture9\n\
bool gesture10\n\
bool gesture11\n\
bool gesture12\n\
bool gesture13\n\
bool gesture14\n\
bool gesture15\n\
bool gesture16\n\
bool gesture17\n\
bool gesture18\n\
bool gesture19\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::gesture::gesture_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::gesture::gesture_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gesture::gesture_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.gesture0);
    stream.next(m.gesture1);
    stream.next(m.gesture2);
    stream.next(m.gesture3);
    stream.next(m.gesture4);
    stream.next(m.gesture5);
    stream.next(m.gesture6);
    stream.next(m.gesture7);
    stream.next(m.gesture8);
    stream.next(m.gesture9);
    stream.next(m.gesture10);
    stream.next(m.gesture11);
    stream.next(m.gesture12);
    stream.next(m.gesture13);
    stream.next(m.gesture14);
    stream.next(m.gesture15);
    stream.next(m.gesture16);
    stream.next(m.gesture17);
    stream.next(m.gesture18);
    stream.next(m.gesture19);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct gesture_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gesture::gesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gesture::gesture_<ContainerAllocator> & v) 
  {
    s << indent << "gesture0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture0);
    s << indent << "gesture1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture1);
    s << indent << "gesture2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture2);
    s << indent << "gesture3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture3);
    s << indent << "gesture4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture4);
    s << indent << "gesture5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture5);
    s << indent << "gesture6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture6);
    s << indent << "gesture7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture7);
    s << indent << "gesture8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture8);
    s << indent << "gesture9: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture9);
    s << indent << "gesture10: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture10);
    s << indent << "gesture11: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture11);
    s << indent << "gesture12: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture12);
    s << indent << "gesture13: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture13);
    s << indent << "gesture14: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture14);
    s << indent << "gesture15: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture15);
    s << indent << "gesture16: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture16);
    s << indent << "gesture17: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture17);
    s << indent << "gesture18: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture18);
    s << indent << "gesture19: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gesture19);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GESTURE_MESSAGE_GESTURE_H

