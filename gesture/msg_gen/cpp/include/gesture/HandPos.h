/* Auto-generated by genmsg_cpp for file /root/GR/gesture/msg/HandPos.msg */
#ifndef GESTURE_MESSAGE_HANDPOS_H
#define GESTURE_MESSAGE_HANDPOS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"

namespace gesture
{
template <class ContainerAllocator>
struct HandPos_ : public ros::Message
{
  typedef HandPos_<ContainerAllocator> Type;

  HandPos_()
  : left_position()
  , right_position()
  , left_click(false)
  , right_click(false)
  {
  }

  HandPos_(const ContainerAllocator& _alloc)
  : left_position(_alloc)
  , right_position(_alloc)
  , left_click(false)
  , right_click(false)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _left_position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  left_position;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _right_position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  right_position;

  typedef uint8_t _left_click_type;
  uint8_t left_click;

  typedef uint8_t _right_click_type;
  uint8_t right_click;


private:
  static const char* __s_getDataType_() { return "gesture/HandPos"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "33cd725b752112008f3a4635435ee4fb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Point left_position\n\
geometry_msgs/Point right_position\n\
bool left_click\n\
bool right_click\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, left_position);
    ros::serialization::serialize(stream, right_position);
    ros::serialization::serialize(stream, left_click);
    ros::serialization::serialize(stream, right_click);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, left_position);
    ros::serialization::deserialize(stream, right_position);
    ros::serialization::deserialize(stream, left_click);
    ros::serialization::deserialize(stream, right_click);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(left_position);
    size += ros::serialization::serializationLength(right_position);
    size += ros::serialization::serializationLength(left_click);
    size += ros::serialization::serializationLength(right_click);
    return size;
  }

  typedef boost::shared_ptr< ::gesture::HandPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gesture::HandPos_<ContainerAllocator>  const> ConstPtr;
}; // struct HandPos
typedef  ::gesture::HandPos_<std::allocator<void> > HandPos;

typedef boost::shared_ptr< ::gesture::HandPos> HandPosPtr;
typedef boost::shared_ptr< ::gesture::HandPos const> HandPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gesture::HandPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gesture::HandPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::gesture::HandPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "33cd725b752112008f3a4635435ee4fb";
  }

  static const char* value(const  ::gesture::HandPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x33cd725b75211200ULL;
  static const uint64_t static_value2 = 0x8f3a4635435ee4fbULL;
};

template<class ContainerAllocator>
struct DataType< ::gesture::HandPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gesture/HandPos";
  }

  static const char* value(const  ::gesture::HandPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gesture::HandPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point left_position\n\
geometry_msgs/Point right_position\n\
bool left_click\n\
bool right_click\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::gesture::HandPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::gesture::HandPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gesture::HandPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left_position);
    stream.next(m.right_position);
    stream.next(m.left_click);
    stream.next(m.right_click);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HandPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gesture::HandPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gesture::HandPos_<ContainerAllocator> & v) 
  {
    s << indent << "left_position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.left_position);
    s << indent << "right_position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.right_position);
    s << indent << "left_click: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_click);
    s << indent << "right_click: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_click);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GESTURE_MESSAGE_HANDPOS_H

